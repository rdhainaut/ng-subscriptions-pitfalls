import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { UserService } from '../../services/user.service';

@Component({
  selector: 'app-dangling-call-bad',
  standalone: true,
  imports: [CommonModule],
  template: `
    <div class="component-container">
      <h2>üî¥ Composant AVEC souscription orpheline</h2>
      <p>Utilisateur actuel: {{ currentUserId }}</p>
      <p *ngIf="userData">Nom: {{ userData.name }}</p>
      <p *ngIf="userData">Email: {{ userData.email }}</p>
      <button (click)="loadUserData()" *ngIf="!userData">Charger utilisateur</button>
      <button (click)="loadNextUser()" *ngIf="userData">Charger utilisateur suivant</button>
      <p class="warning">‚ö†Ô∏è Ce composant ne fait PAS de takeUntil - regardez la console !</p>
      <div class="instructions">
        <h4>üìã Test de souscription orpheline:</h4>
        <ol>
          <li>Cliquez sur "Charger utilisateur"</li>
          <li>Naviguez imm√©diatement vers "Good Component"</li>
          <li>Observez dans la console que le callback HTTP s'ex√©cute encore !</li>
        </ol>
      </div>
    </div>
  `,
  styles: [`
    .component-container {
      padding: 20px;
      border: 2px solid #ff4444;
      margin: 10px;
      background-color: #fff5f5;
      border-radius: 8px;
    }
    .warning {
      color: #ff4444;
      font-weight: bold;
    }
    .instructions {
      background-color: #ffe6e6;
      padding: 15px;
      border-radius: 5px;
      margin-top: 20px;
    }
    button {
      background-color: #ff4444;
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
      margin: 10px 0;
    }
    button:hover {
      background-color: #cc3333;
    }
  `]
})
export class DanglingCallBadComponent implements OnInit, OnDestroy {
  userData: any = null;
  currentUserId = 1;
  private componentDestroyed = false;

  constructor(private userService: UserService) {}

  ngOnInit() {
    console.log(`üî¥ DANGLING CALL BAD COMPONENT cr√©√©`);
  }

  ngOnDestroy() {
    this.componentDestroyed = true;
    console.log(`üíÄ DANGLING CALL BAD COMPONENT d√©truit`);
    console.log(`‚ö†Ô∏è  ATTENTION: Souscription orpheline - HTTP callback va s'ex√©cuter !`);
  }

  loadUserData() {
    // ‚ùå PROBL√àME: Pas de takeUntilDestroyed() ici !
    // Le callback continue de s'ex√©cuter m√™me apr√®s la destruction du composant
    this.userService.getUserData(this.currentUserId, 'DANGLING CALL BAD COMPONENT').subscribe({
      next: (data) => {
        if (this.componentDestroyed) {
          console.error(`üö® ERREUR CRITIQUE ! DanglingCallBadComponent d√©truit mais callback ex√©cut√© !`);
          console.error(`üí• Tentative de mise √† jour d'un composant d√©truit - ceci peut causer des erreurs !`);
          console.error(`üìä Donn√©es re√ßues:`, data);
          
          // Simuler une erreur r√©elle qui pourrait se produire
          try {
            this.userData = data; // Ceci pourrait causer des erreurs dans des cas r√©els
            console.error(`‚ö†Ô∏è  Mutation d'√©tat sur composant d√©truit - comportement ind√©fini !`);
          } catch (error) {
            console.error(`üíÄ Erreur lors de la mutation:`, error);
          }
        } else {
          console.log(`‚úÖ [DANGLING CALL BAD COMPONENT] R√âPONSE HTTP re√ßue correctement`);
          this.userData = data;
        }
      },
      error: (error) => {
        console.error('‚ùå Erreur dans DanglingCallBadComponent:', error);
      }
    });
  }

  loadNextUser() {
    this.currentUserId++;
    this.userData = null;
    this.loadUserData();
  }
}